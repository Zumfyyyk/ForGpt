import ccxt
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
from services.chart import generate_chart
from services.bybit_api import fetch_ohlcv_async
from utils.buttons import get_back_button, get_main_menu
from handlers.start import show_main_menu
from logger import setup_logger

exchange = ccxt.bybit()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
logger = setup_logger()  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞

async def request_chart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.debug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥—Ä–∞—Ñ–∏–∫–∞")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: BTC/USDT", reply_markup=get_back_button())

async def select_timeframe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    symbol = update.message.text.strip().upper()
    markets = exchange.load_markets()
    if symbol not in markets:
        logger.debug(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª: {symbol}")
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ: BTC/USDT.")
        return

    context.user_data['symbol'] = symbol
    logger.debug(f"–í—ã–±—Ä–∞–Ω —Å–∏–º–≤–æ–ª: {symbol}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1m, 5m, 15m, 30m, 1h, 2h, 4h, 5h):", reply_markup=get_back_button())

async def send_chart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    timeframe = update.message.text.strip()
    symbol = context.user_data.get('symbol')
    logger.debug(f"–í—ã–±—Ä–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {timeframe} –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol}")

    try:
        await handle_chart_request(symbol, timeframe, update.effective_chat.id, context)
    except ccxt.BaseError as e:
        if isinstance(e, ccxt.BadSymbol):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª: {symbol}")
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    return await show_main_menu(update)

async def handle_chart_request(symbol, interval, user_id, context) -> None:
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: {interval}")
    data = await fetch_ohlcv_async(symbol, interval)
    chart = await generate_chart(symbol, interval)
    if chart:
        await context.bot.send_photo(chat_id=user_id, photo=chart)
        logger.debug(f"–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}")
    else:
        await context.bot.send_message(chat_id=user_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: {interval}")

def get_analysis_handlers() -> list:
    logger.debug("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
    return [
        MessageHandler(filters.TEXT & filters.Regex("üìä –ì—Ä–∞—Ñ–∏–∫"), request_chart),
        MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("–ù–∞–∑–∞–¥") & filters.Regex("^[A-Z]+/[A-Z]+$"), select_timeframe),
        MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("–ù–∞–∑–∞–¥") & filters.Regex("^(1m|5m|15m|30m|1h|2h|4h|5h)$"), send_chart),
    ]
